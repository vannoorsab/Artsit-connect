{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport interface PricingSuggestion {\n  suggestedPrice: number;\n  priceRange: {\n    min: number;\n    max: number;\n  };\n  reasoning: string;\n  marketFactors: string[];\n}\n\nexport interface MarketingContent {\n  seoTitle: string;\n  socialCaption: string;\n  storyVersion: string;\n  marketingDescription: string;\n}\n\nexport interface ArtisanStoryEnhancement {\n  enhancedBio: string;\n  craftStory: string;\n  inspirationSources: string[];\n  uniqueSellingPoints: string[];\n}\n\nexport async function generatePricingSuggestion(\n  productTitle: string,\n  description: string,\n  category: string,\n  materials: string\n): Promise<PricingSuggestion> {\n  try {\n    const prompt = `Analyze this handmade artisan product and suggest pricing:\n    \nProduct: ${productTitle}\nDescription: ${description}\nCategory: ${category}\nMaterials: ${materials}\n\nConsider factors like:\n- Materials cost and quality\n- Time investment for handmade items\n- Market positioning for artisan goods\n- Category-specific pricing trends\n- Value perception for handcrafted items\n\nProvide a JSON response with:\n{\n  \"suggestedPrice\": number,\n  \"priceRange\": {\"min\": number, \"max\": number},\n  \"reasoning\": \"explanation of pricing rationale\",\n  \"marketFactors\": [\"factor1\", \"factor2\", \"factor3\"]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a pricing expert for handmade artisan products. Provide realistic pricing suggestions based on materials, craftsmanship, and market positioning.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content);\n    return {\n      suggestedPrice: Math.max(10, result.suggestedPrice),\n      priceRange: {\n        min: Math.max(5, result.priceRange.min),\n        max: result.priceRange.max\n      },\n      reasoning: result.reasoning,\n      marketFactors: result.marketFactors\n    };\n  } catch (error) {\n    throw new Error(\"Failed to generate pricing suggestion: \" + error.message);\n  }\n}\n\nexport async function generateMarketingContent(\n  productTitle: string,\n  description: string,\n  category: string,\n  artisanName: string\n): Promise<MarketingContent> {\n  try {\n    const prompt = `Create marketing content for this artisan product:\n\nProduct: ${productTitle}\nDescription: ${description}\nCategory: ${category}\nArtisan: ${artisanName}\n\nGenerate compelling marketing content that highlights:\n- Handmade craftsmanship value\n- Unique artisan story elements\n- SEO-friendly keywords\n- Emotional connection points\n- Social media appeal\n\nProvide JSON response with:\n{\n  \"seoTitle\": \"SEO-optimized title with relevant keywords\",\n  \"socialCaption\": \"Instagram-ready caption with hashtags\",\n  \"storyVersion\": \"Emotional storytelling version emphasizing craft\",\n  \"marketingDescription\": \"Compelling product description for listings\"\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a marketing copywriter specializing in handmade artisan products. Create compelling, authentic content that resonates with buyers of handcrafted goods.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    return JSON.parse(response.choices[0].message.content);\n  } catch (error) {\n    throw new Error(\"Failed to generate marketing content: \" + error.message);\n  }\n}\n\nexport async function enhanceArtisanStory(\n  currentBio: string,\n  craftType: string,\n  location: string,\n  experience: string\n): Promise<ArtisanStoryEnhancement> {\n  try {\n    const prompt = `Enhance this artisan's story and profile:\n\nCurrent Bio: ${currentBio}\nCraft Type: ${craftType}\nLocation: ${location}\nExperience: ${experience}\n\nCreate an enhanced artisan story that:\n- Maintains authenticity while improving storytelling\n- Highlights unique aspects of their craft journey\n- Creates emotional connection with potential buyers\n- Emphasizes artisan expertise and passion\n- Includes inspiration sources and creative process\n\nProvide JSON response with:\n{\n  \"enhancedBio\": \"Improved version of the bio with better storytelling\",\n  \"craftStory\": \"Detailed story about their craft journey and techniques\",\n  \"inspirationSources\": [\"source1\", \"source2\", \"source3\"],\n  \"uniqueSellingPoints\": [\"point1\", \"point2\", \"point3\"]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a storytelling expert who helps artisans tell their craft stories in compelling ways that connect with customers while maintaining authenticity.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    return JSON.parse(response.choices[0].message.content);\n  } catch (error) {\n    throw new Error(\"Failed to enhance artisan story: \" + error.message);\n  }\n}\n\nexport async function analyzeProductImage(base64Image: string): Promise<{\n  suggestions: string[];\n  detectedMaterials: string[];\n  styleAnalysis: string;\n  improvementTips: string[];\n}> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: `Analyze this artisan product image and provide insights for the seller. Focus on:\n              - Materials and craftsmanship visible in the image\n              - Style and aesthetic analysis\n              - Photography and presentation suggestions\n              - Marketing and listing improvement tips\n              \n              Respond in JSON format with:\n              {\n                \"suggestions\": [\"suggestion1\", \"suggestion2\"],\n                \"detectedMaterials\": [\"material1\", \"material2\"],\n                \"styleAnalysis\": \"description of style and aesthetic\",\n                \"improvementTips\": [\"tip1\", \"tip2\", \"tip3\"]\n              }`\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ],\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 2048,\n    });\n\n    return JSON.parse(response.choices[0].message.content);\n  } catch (error) {\n    throw new Error(\"Failed to analyze product image: \" + error.message);\n  }\n}\n","size_bytes":6986},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  generatePricingSuggestion, \n  generateMarketingContent, \n  enhanceArtisanStory,\n  analyzeProductImage \n} from \"./openai\";\nimport { \n  insertProductSchema, \n  insertInquirySchema, \n  insertReviewSchema,\n  insertCategorySchema \n} from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: uploadDir,\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n    }\n  }),\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'), false);\n    }\n  },\n  limits: {\n    fileSize: 10 * 1024 * 1024 // 10MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Serve uploaded files\n  app.use('/uploads', express.static(uploadDir));\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Category routes\n  app.get('/api/categories', async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post('/api/categories', isAuthenticated, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  // Product routes\n  app.get('/api/products', async (req, res) => {\n    try {\n      const { categoryId, search, artisanId } = req.query;\n      const products = await storage.getProducts({\n        categoryId: categoryId as string,\n        search: search as string,\n        artisanId: artisanId as string\n      });\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get('/api/products/:id', async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post('/api/products', isAuthenticated, upload.array('images', 10), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const files = req.files as Express.Multer.File[];\n      const imagePaths = files?.map(file => `/uploads/${file.filename}`) || [];\n      \n      const productData = insertProductSchema.parse({\n        ...req.body,\n        artisanId: userId,\n        images: imagePaths,\n        price: parseFloat(req.body.price)\n      });\n\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const product = await storage.getProduct(req.params.id);\n      \n      if (!product || product.artisanId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updatedProduct = await storage.updateProduct(req.params.id, req.body);\n      res.json(updatedProduct);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const product = await storage.getProduct(req.params.id);\n      \n      if (!product || product.artisanId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteProduct(req.params.id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // AI assistance routes\n  app.post('/api/ai/pricing', isAuthenticated, async (req, res) => {\n    try {\n      const { title, description, category, materials } = req.body;\n      \n      if (!title || !description || !category) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const pricingSuggestion = await generatePricingSuggestion(\n        title, \n        description, \n        category, \n        materials || \"\"\n      );\n      \n      res.json(pricingSuggestion);\n    } catch (error) {\n      console.error(\"Error generating pricing suggestion:\", error);\n      res.status(500).json({ message: \"Failed to generate pricing suggestion\" });\n    }\n  });\n\n  app.post('/api/ai/marketing', isAuthenticated, async (req: any, res) => {\n    try {\n      const { title, description, category } = req.body;\n      const user = await storage.getUser(req.user.claims.sub);\n      \n      if (!title || !description || !category) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const artisanName = user?.firstName && user?.lastName \n        ? `${user.firstName} ${user.lastName}` \n        : 'Artisan';\n\n      const marketingContent = await generateMarketingContent(\n        title,\n        description,\n        category,\n        artisanName\n      );\n      \n      res.json(marketingContent);\n    } catch (error) {\n      console.error(\"Error generating marketing content:\", error);\n      res.status(500).json({ message: \"Failed to generate marketing content\" });\n    }\n  });\n\n  app.post('/api/ai/story', isAuthenticated, async (req: any, res) => {\n    try {\n      const { bio, craftType, experience } = req.body;\n      const user = await storage.getUser(req.user.claims.sub);\n      \n      if (!bio || !craftType) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const enhancedStory = await enhanceArtisanStory(\n        bio,\n        craftType,\n        user?.location || \"\",\n        experience || \"\"\n      );\n      \n      res.json(enhancedStory);\n    } catch (error) {\n      console.error(\"Error enhancing artisan story:\", error);\n      res.status(500).json({ message: \"Failed to enhance artisan story\" });\n    }\n  });\n\n  app.post('/api/ai/analyze-image', isAuthenticated, upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file provided\" });\n      }\n\n      const imageBuffer = fs.readFileSync(req.file.path);\n      const base64Image = imageBuffer.toString('base64');\n      \n      const analysis = await analyzeProductImage(base64Image);\n      \n      // Clean up uploaded file\n      fs.unlinkSync(req.file.path);\n      \n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error analyzing image:\", error);\n      res.status(500).json({ message: \"Failed to analyze image\" });\n    }\n  });\n\n  // Inquiry routes\n  app.get('/api/inquiries', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const inquiries = await storage.getInquiries(userId);\n      res.json(inquiries);\n    } catch (error) {\n      console.error(\"Error fetching inquiries:\", error);\n      res.status(500).json({ message: \"Failed to fetch inquiries\" });\n    }\n  });\n\n  app.post('/api/inquiries', isAuthenticated, async (req: any, res) => {\n    try {\n      const buyerId = req.user.claims.sub;\n      const inquiryData = insertInquirySchema.parse({\n        ...req.body,\n        buyerId\n      });\n\n      const inquiry = await storage.createInquiry(inquiryData);\n      res.json(inquiry);\n    } catch (error) {\n      console.error(\"Error creating inquiry:\", error);\n      res.status(500).json({ message: \"Failed to create inquiry\" });\n    }\n  });\n\n  // Favorites routes\n  app.get('/api/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const favorites = await storage.getFavorites(userId);\n      res.json(favorites);\n    } catch (error) {\n      console.error(\"Error fetching favorites:\", error);\n      res.status(500).json({ message: \"Failed to fetch favorites\" });\n    }\n  });\n\n  app.post('/api/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { productId } = req.body;\n      \n      const favorite = await storage.addFavorite({ userId, productId });\n      res.json(favorite);\n    } catch (error) {\n      console.error(\"Error adding favorite:\", error);\n      res.status(500).json({ message: \"Failed to add favorite\" });\n    }\n  });\n\n  app.delete('/api/favorites/:productId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { productId } = req.params;\n      \n      await storage.removeFavorite(userId, productId);\n      res.json({ message: \"Favorite removed successfully\" });\n    } catch (error) {\n      console.error(\"Error removing favorite:\", error);\n      res.status(500).json({ message: \"Failed to remove favorite\" });\n    }\n  });\n\n  // Reviews routes\n  app.get('/api/reviews/:productId', async (req, res) => {\n    try {\n      const reviews = await storage.getReviews(req.params.productId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post('/api/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const buyerId = req.user.claims.sub;\n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        buyerId\n      });\n\n      const review = await storage.createReview(reviewData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  // Artisan stats\n  app.get('/api/artisan/:id/stats', async (req, res) => {\n    try {\n      const stats = await storage.getArtisanStats(req.params.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching artisan stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch artisan stats\" });\n    }\n  });\n\n  // Update user profile\n  app.put('/api/user/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const updatedUser = await storage.upsertUser({\n        id: userId,\n        ...req.body\n      });\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12087},"server/storage.ts":{"content":"import {\n  users,\n  categories,\n  products,\n  inquiries,\n  favorites,\n  reviews,\n  type User,\n  type UpsertUser,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type Inquiry,\n  type InsertInquiry,\n  type Favorite,\n  type InsertFavorite,\n  type Review,\n  type InsertReview,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, ilike, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (IMPORTANT for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Product operations\n  getProducts(filters?: { categoryId?: string; search?: string; artisanId?: string }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Inquiry operations\n  getInquiries(userId: string): Promise<Inquiry[]>;\n  createInquiry(inquiry: InsertInquiry): Promise<Inquiry>;\n  updateInquiryStatus(id: string, status: string): Promise<Inquiry>;\n  \n  // Favorite operations\n  getFavorites(userId: string): Promise<Product[]>;\n  addFavorite(favorite: InsertFavorite): Promise<Favorite>;\n  removeFavorite(userId: string, productId: string): Promise<void>;\n  \n  // Review operations\n  getReviews(productId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  \n  // Analytics\n  getArtisanStats(artisanId: string): Promise<{\n    totalProducts: number;\n    totalInquiries: number;\n    averageRating: number;\n    totalReviews: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return db.select().from(categories).orderBy(categories.name);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Product operations\n  async getProducts(filters?: { categoryId?: string; search?: string; artisanId?: string }): Promise<Product[]> {\n    let query = db.select().from(products).where(eq(products.isActive, true));\n    \n    if (filters?.categoryId) {\n      query = query.where(eq(products.categoryId, filters.categoryId));\n    }\n    \n    if (filters?.search) {\n      query = query.where(\n        ilike(products.title, `%${filters.search}%`)\n      );\n    }\n    \n    if (filters?.artisanId) {\n      query = query.where(eq(products.artisanId, filters.artisanId));\n    }\n    \n    return query.orderBy(desc(products.createdAt));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.update(products).set({ isActive: false }).where(eq(products.id, id));\n  }\n\n  // Inquiry operations\n  async getInquiries(userId: string): Promise<Inquiry[]> {\n    return db.select().from(inquiries)\n      .where(eq(inquiries.artisanId, userId))\n      .orderBy(desc(inquiries.createdAt));\n  }\n\n  async createInquiry(inquiry: InsertInquiry): Promise<Inquiry> {\n    const [newInquiry] = await db.insert(inquiries).values(inquiry).returning();\n    return newInquiry;\n  }\n\n  async updateInquiryStatus(id: string, status: string): Promise<Inquiry> {\n    const [updatedInquiry] = await db\n      .update(inquiries)\n      .set({ status })\n      .where(eq(inquiries.id, id))\n      .returning();\n    return updatedInquiry;\n  }\n\n  // Favorite operations\n  async getFavorites(userId: string): Promise<Product[]> {\n    const favoriteProducts = await db\n      .select()\n      .from(favorites)\n      .innerJoin(products, eq(favorites.productId, products.id))\n      .where(eq(favorites.userId, userId));\n    \n    return favoriteProducts.map(fp => fp.products);\n  }\n\n  async addFavorite(favorite: InsertFavorite): Promise<Favorite> {\n    const [newFavorite] = await db.insert(favorites).values(favorite).returning();\n    return newFavorite;\n  }\n\n  async removeFavorite(userId: string, productId: string): Promise<void> {\n    await db.delete(favorites)\n      .where(and(eq(favorites.userId, userId), eq(favorites.productId, productId)));\n  }\n\n  // Review operations\n  async getReviews(productId: string): Promise<Review[]> {\n    return db.select().from(reviews)\n      .where(eq(reviews.productId, productId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(review).returning();\n    return newReview;\n  }\n\n  // Analytics\n  async getArtisanStats(artisanId: string): Promise<{\n    totalProducts: number;\n    totalInquiries: number;\n    averageRating: number;\n    totalReviews: number;\n  }> {\n    const totalProducts = await db\n      .select({ count: sql`count(*)` })\n      .from(products)\n      .where(and(eq(products.artisanId, artisanId), eq(products.isActive, true)));\n\n    const totalInquiries = await db\n      .select({ count: sql`count(*)` })\n      .from(inquiries)\n      .where(eq(inquiries.artisanId, artisanId));\n\n    const reviewStats = await db\n      .select({\n        avgRating: sql`avg(${reviews.rating})`,\n        count: sql`count(*)`\n      })\n      .from(reviews)\n      .where(eq(reviews.artisanId, artisanId));\n\n    return {\n      totalProducts: Number(totalProducts[0]?.count || 0),\n      totalInquiries: Number(totalInquiries[0]?.count || 0),\n      averageRating: Number(reviewStats[0]?.avgRating || 0),\n      totalReviews: Number(reviewStats[0]?.count || 0),\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6876},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  bio: text(\"bio\"),\n  location: varchar(\"location\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  slug: varchar(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  categoryId: varchar(\"category_id\").notNull(),\n  artisanId: varchar(\"artisan_id\").notNull(),\n  images: text(\"images\").array(),\n  materials: varchar(\"materials\"),\n  dimensions: varchar(\"dimensions\"),\n  careInstructions: text(\"care_instructions\"),\n  isActive: boolean(\"is_active\").default(true),\n  aiEnhanced: boolean(\"ai_enhanced\").default(false),\n  aiPricingSuggested: boolean(\"ai_pricing_suggested\").default(false),\n  seoTitle: varchar(\"seo_title\"),\n  marketingCaption: text(\"marketing_caption\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const inquiries = pgTable(\"inquiries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull(),\n  buyerId: varchar(\"buyer_id\").notNull(),\n  artisanId: varchar(\"artisan_id\").notNull(),\n  subject: varchar(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, responded, closed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const favorites = pgTable(\"favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull(),\n  buyerId: varchar(\"buyer_id\").notNull(),\n  artisanId: varchar(\"artisan_id\").notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  products: many(products),\n  inquiries: many(inquiries),\n  favorites: many(favorites),\n  reviews: many(reviews),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  artisan: one(users, {\n    fields: [products.artisanId],\n    references: [users.id],\n  }),\n  inquiries: many(inquiries),\n  favorites: many(favorites),\n  reviews: many(reviews),\n}));\n\nexport const inquiriesRelations = relations(inquiries, ({ one }) => ({\n  product: one(products, {\n    fields: [inquiries.productId],\n    references: [products.id],\n  }),\n  buyer: one(users, {\n    fields: [inquiries.buyerId],\n    references: [users.id],\n  }),\n  artisan: one(users, {\n    fields: [inquiries.artisanId],\n    references: [users.id],\n  }),\n}));\n\nexport const favoritesRelations = relations(favorites, ({ one }) => ({\n  user: one(users, {\n    fields: [favorites.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [favorites.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  product: one(products, {\n    fields: [reviews.productId],\n    references: [products.id],\n  }),\n  buyer: one(users, {\n    fields: [reviews.buyerId],\n    references: [users.id],\n  }),\n  artisan: one(users, {\n    fields: [reviews.artisanId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInquirySchema = createInsertSchema(inquiries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Inquiry = typeof inquiries.$inferSelect;\nexport type InsertInquiry = z.infer<typeof insertInquirySchema>;\nexport type Favorite = typeof favorites.$inferSelect;\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n","size_bytes":6374},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Marketplace from \"@/pages/marketplace\";\nimport Upload from \"@/pages/upload\";\nimport ArtisanProfile from \"@/pages/artisan-profile\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/marketplace\" component={Marketplace} />\n          <Route path=\"/upload\" component={Upload} />\n          <Route path=\"/artisan/:id\" component={ArtisanProfile} />\n          <Route path=\"/product/:id\" component={ProductDetail} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1411},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Dancing+Script:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(35, 20%, 98%);\n  --foreground: hsl(0, 0%, 17%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 17%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 17%);\n  --primary: hsl(22, 65%, 57%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(100, 25%, 25%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(80, 20%, 75%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(80, 30%, 70%);\n  --accent-foreground: hsl(0, 0%, 17%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(35, 15%, 85%);\n  --input: hsl(35, 15%, 95%);\n  --ring: hsl(22, 65%, 57%);\n  --chart-1: hsl(22, 65%, 57%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(35, 20%, 98%);\n  --sidebar-foreground: hsl(0, 0%, 17%);\n  --sidebar-primary: hsl(22, 65%, 57%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(80, 30%, 70%);\n  --sidebar-accent-foreground: hsl(0, 0%, 17%);\n  --sidebar-border: hsl(35, 15%, 85%);\n  --sidebar-ring: hsl(22, 65%, 57%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: \"Playfair Display\", serif;\n  --font-script: \"Dancing Script\", cursive;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(22, 65%, 57%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(22, 65%, 57%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(22, 65%, 57%, 0.00), 0px 1px 2px -1px hsl(22, 65%, 57%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(22, 65%, 57%, 0.00), 0px 1px 2px -1px hsl(22, 65%, 57%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(22, 65%, 57%, 0.00), 0px 2px 4px -1px hsl(22, 65%, 57%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(22, 65%, 57%, 0.00), 0px 4px 6px -1px hsl(22, 65%, 57%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(22, 65%, 57%, 0.00), 0px 8px 10px -1px hsl(22, 65%, 57%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(22, 65%, 57%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(22, 65%, 57%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(100, 25%, 25%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(80, 30%, 70%);\n  --accent-foreground: hsl(0, 0%, 17%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(22, 65%, 57%);\n  --chart-1: hsl(22, 65%, 57%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(22, 65%, 57%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(80, 30%, 70%);\n  --sidebar-accent-foreground: hsl(0, 0%, 17%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(22, 65%, 57%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: \"Playfair Display\", serif;\n  --font-script: \"Dancing Script\", cursive;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.ai-badge {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.8; }\n}\n\n.craft-pattern {\n  background-image: radial-gradient(circle at 2px 2px, rgba(44, 44, 44, 0.15) 1px, transparent 0);\n  background-size: 20px 20px;\n}\n\n.product-card {\n  transition: all 0.3s ease;\n}\n\n.product-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors;\n  }\n  \n  .btn-secondary {\n    @apply bg-secondary text-secondary-foreground px-4 py-2 rounded-lg hover:bg-secondary/90 transition-colors;\n  }\n  \n  .btn-outline {\n    @apply border border-border text-foreground px-4 py-2 rounded-lg hover:bg-muted transition-colors;\n  }\n}\n","size_bytes":4973},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/category-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Palette, Scissors, Shirt, Gem } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nconst categoryIcons = {\n  pottery: Palette,\n  woodworking: Scissors,\n  textiles: Shirt,\n  jewelry: Gem,\n};\n\nexport default function CategoryGrid() {\n  const { data: categories, isLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-serif text-3xl font-bold text-foreground mb-4\">Shop by Craft</h2>\n            <p className=\"text-muted-foreground\">Discover amazing handmade items across various categories</p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"bg-background rounded-xl p-6\">\n                <Skeleton className=\"h-12 w-12 mx-auto mb-4 rounded\" />\n                <Skeleton className=\"h-5 w-3/4 mx-auto mb-2\" />\n                <Skeleton className=\"h-4 w-1/2 mx-auto\" />\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 bg-card\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"font-serif text-3xl font-bold text-foreground mb-4\">Shop by Craft</h2>\n          <p className=\"text-muted-foreground\">Discover amazing handmade items across various categories</p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n          {categories?.map((category) => {\n            const IconComponent = categoryIcons[category.slug as keyof typeof categoryIcons] || Palette;\n            return (\n              <div \n                key={category.id} \n                className=\"bg-background rounded-xl p-6 text-center hover:shadow-lg transition-shadow cursor-pointer\"\n                data-testid={`category-card-${category.slug}`}\n              >\n                <IconComponent className=\"text-primary text-4xl mb-4 mx-auto h-12 w-12\" />\n                <h3 className=\"font-medium text-foreground mb-2\">{category.name}</h3>\n                <p className=\"text-sm text-muted-foreground\">Browse items</p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2526},"client/src/components/footer.tsx":{"content":"import { Instagram, Facebook, Twitter } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-secondary text-secondary-foreground py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <i className=\"fas fa-hammer text-primary text-2xl\"></i>\n              <span className=\"font-serif font-bold text-xl\">CraftHub</span>\n              <span className=\"ai-badge text-white text-xs px-2 py-1 rounded-full\">AI</span>\n            </div>\n            <p className=\"text-secondary-foreground/80 mb-6 max-w-md\">\n              Connecting passionate artisans with appreciative customers through AI-powered tools that help tell every craft's unique story.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-secondary-foreground/60 hover:text-secondary-foreground transition-colors\" data-testid=\"link-instagram\">\n                <Instagram className=\"h-5 w-5\" />\n              </a>\n              <a href=\"#\" className=\"text-secondary-foreground/60 hover:text-secondary-foreground transition-colors\" data-testid=\"link-facebook\">\n                <Facebook className=\"h-5 w-5\" />\n              </a>\n              <a href=\"#\" className=\"text-secondary-foreground/60 hover:text-secondary-foreground transition-colors\" data-testid=\"link-twitter\">\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold mb-4\">For Artisans</h3>\n            <ul className=\"space-y-2 text-secondary-foreground/80\">\n              <li><a href=\"/upload\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-start-selling\">Start Selling</a></li>\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-ai-tools\">AI Tools</a></li>\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-pricing-guide\">Pricing Guide</a></li>\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-success-stories\">Success Stories</a></li>\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-resources\">Resources</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold mb-4\">Support</h3>\n            <ul className=\"space-y-2 text-secondary-foreground/80\">\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-help-center\">Help Center</a></li>\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-contact\">Contact Us</a></li>\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-privacy\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-terms\">Terms of Service</a></li>\n              <li><a href=\"#\" className=\"hover:text-secondary-foreground transition-colors\" data-testid=\"link-trust\">Trust & Safety</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-secondary-foreground/20 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-secondary-foreground/60 text-sm\">\n            Â© 2024 CraftHub. All rights reserved.\n          </p>\n          <div className=\"flex items-center space-x-4 mt-4 md:mt-0\">\n            <div className=\"flex items-center text-sm text-secondary-foreground/80\">\n              <div className=\"ai-badge text-white px-2 py-1 rounded mr-2\">AI</div>\n              Powered by OpenAI technology\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4109},"client/src/components/hero-section.tsx":{"content":"import { Link } from \"wouter\";\nimport { Compass, Plus, Bot, Handshake, Shield } from \"lucide-react\";\n\nexport default function HeroSection() {\n  return (\n    <section className=\"relative py-20 overflow-hidden craft-pattern\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-accent/20 to-transparent\"></div>\n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <h1 className=\"font-serif text-5xl md:text-6xl font-bold text-foreground mb-6\">\n            Where <span className=\"text-primary\">Craft</span> Meets <span className=\"text-secondary\">Technology</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            Discover unique handmade treasures from local artisans, powered by AI assistance to help creators tell their stories and price their masterpieces.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/marketplace\">\n              <button className=\"btn-primary text-lg font-medium flex items-center px-8 py-3\" data-testid=\"button-explore\">\n                <Compass className=\"mr-2 h-5 w-5\" />\n                Explore Marketplace\n              </button>\n            </Link>\n            <Link href=\"/upload\">\n              <button className=\"btn-secondary text-lg font-medium flex items-center px-8 py-3\" data-testid=\"button-start-selling\">\n                <Plus className=\"mr-2 h-5 w-5\" />\n                Start Selling\n              </button>\n            </Link>\n          </div>\n          <div className=\"mt-8 flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-6 text-sm text-muted-foreground\">\n            <div className=\"flex items-center\">\n              <Bot className=\"text-primary mr-2 h-4 w-4\" />\n              AI-Powered Assistance\n            </div>\n            <div className=\"flex items-center\">\n              <Handshake className=\"text-accent-foreground mr-2 h-4 w-4\" />\n              Direct Artist Connection\n            </div>\n            <div className=\"flex items-center\">\n              <Shield className=\"text-secondary mr-2 h-4 w-4\" />\n              Trusted Marketplace\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2316},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Search, Heart, Menu, X } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-card/95 border-b border-border backdrop-blur-md\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"logo-link\">\n            <i className=\"fas fa-hammer text-primary text-2xl\"></i>\n            <span className=\"font-serif font-bold text-xl text-foreground\">CraftHub</span>\n            <span className=\"ai-badge text-white text-xs px-2 py-1 rounded-full\">AI</span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link\n              href=\"/marketplace\"\n              className={`text-sm transition-colors hover:text-foreground ${\n                location === \"/marketplace\" ? \"text-foreground\" : \"text-muted-foreground\"\n              }`}\n              data-testid=\"link-marketplace\"\n            >\n              Marketplace\n            </Link>\n            {isAuthenticated && (\n              <>\n                <Link\n                  href=\"/upload\"\n                  className={`text-sm transition-colors hover:text-foreground ${\n                    location === \"/upload\" ? \"text-foreground\" : \"text-muted-foreground\"\n                  }`}\n                  data-testid=\"link-upload\"\n                >\n                  Sell\n                </Link>\n                <Link\n                  href={`/artisan/${user?.id}`}\n                  className={`text-sm transition-colors hover:text-foreground ${\n                    location.startsWith(\"/artisan\") ? \"text-foreground\" : \"text-muted-foreground\"\n                  }`}\n                  data-testid=\"link-profile\"\n                >\n                  My Profile\n                </Link>\n              </>\n            )}\n          </div>\n\n          {/* Auth Buttons */}\n          <div className=\"flex items-center space-x-4\">\n            <button \n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"button-search\"\n            >\n              <Search className=\"h-5 w-5\" />\n            </button>\n            {isAuthenticated && (\n              <button \n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"button-favorites\"\n              >\n                <Heart className=\"h-5 w-5\" />\n              </button>\n            )}\n            {isAuthenticated ? (\n              <div className=\"flex items-center space-x-3\">\n                {user?.profileImageUrl && (\n                  <img\n                    src={user.profileImageUrl}\n                    alt=\"Profile\"\n                    className=\"w-8 h-8 rounded-full object-cover\"\n                    data-testid=\"img-avatar\"\n                  />\n                )}\n                <a\n                  href=\"/api/logout\"\n                  className=\"btn-outline text-sm\"\n                  data-testid=\"button-logout\"\n                >\n                  Sign Out\n                </a>\n              </div>\n            ) : (\n              <a\n                href=\"/api/login\"\n                className=\"btn-primary text-sm\"\n                data-testid=\"button-signin\"\n              >\n                Sign In\n              </a>\n            )}\n\n            {/* Mobile menu button */}\n            <button\n              className=\"md:hidden text-muted-foreground hover:text-foreground\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {mobileMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden border-t border-border py-4\">\n            <div className=\"space-y-4\">\n              <Link\n                href=\"/marketplace\"\n                className=\"block text-muted-foreground hover:text-foreground transition-colors\"\n                onClick={() => setMobileMenuOpen(false)}\n                data-testid=\"mobile-link-marketplace\"\n              >\n                Marketplace\n              </Link>\n              {isAuthenticated && (\n                <>\n                  <Link\n                    href=\"/upload\"\n                    className=\"block text-muted-foreground hover:text-foreground transition-colors\"\n                    onClick={() => setMobileMenuOpen(false)}\n                    data-testid=\"mobile-link-upload\"\n                  >\n                    Sell\n                  </Link>\n                  <Link\n                    href={`/artisan/${user?.id}`}\n                    className=\"block text-muted-foreground hover:text-foreground transition-colors\"\n                    onClick={() => setMobileMenuOpen(false)}\n                    data-testid=\"mobile-link-profile\"\n                  >\n                    My Profile\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5534},"client/src/components/product-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Heart, Star } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product & {\n    artisan?: {\n      firstName: string | null;\n      lastName: string | null;\n    };\n    category?: {\n      name: string;\n    };\n    _count?: {\n      reviews: number;\n    };\n    averageRating?: number;\n  };\n  isFavorited?: boolean;\n}\n\nexport default function ProductCard({ product, isFavorited = false }: ProductCardProps) {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [favorited, setFavorited] = useState(isFavorited);\n\n  const favoriteMutation = useMutation({\n    mutationFn: async (action: 'add' | 'remove') => {\n      if (action === 'add') {\n        return apiRequest('POST', '/api/favorites', { productId: product.id });\n      } else {\n        return apiRequest('DELETE', `/api/favorites/${product.id}`);\n      }\n    },\n    onSuccess: (_, action) => {\n      setFavorited(action === 'add');\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      toast({\n        title: action === 'add' ? \"Added to favorites\" : \"Removed from favorites\",\n        variant: \"default\"\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update favorites\",\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  const handleFavoriteClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to save favorites\",\n        variant: \"default\"\n      });\n      return;\n    }\n\n    favoriteMutation.mutate(favorited ? 'remove' : 'add');\n  };\n\n  const artisanName = product.artisan?.firstName && product.artisan?.lastName\n    ? `${product.artisan.firstName} ${product.artisan.lastName}`\n    : 'Unknown Artisan';\n\n  const mainImage = product.images?.[0] || 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300';\n\n  return (\n    <div className=\"product-card bg-background rounded-xl overflow-hidden shadow-sm\" data-testid={`product-card-${product.id}`}>\n      <Link href={`/product/${product.id}`}>\n        <div className=\"relative\">\n          <img \n            src={mainImage}\n            alt={product.title} \n            className=\"w-full h-48 object-cover\"\n            data-testid=\"img-product\"\n          />\n          <button \n            onClick={handleFavoriteClick}\n            className=\"absolute top-3 right-3 p-2 bg-white/80 rounded-full hover:bg-white transition-colors\"\n            disabled={favoriteMutation.isPending}\n            data-testid=\"button-favorite\"\n          >\n            <Heart \n              className={`h-4 w-4 ${favorited ? 'fill-red-500 text-red-500' : 'text-gray-600'}`} \n            />\n          </button>\n        </div>\n      </Link>\n      \n      <div className=\"p-4\">\n        <Link href={`/product/${product.id}`}>\n          <div className=\"flex items-start justify-between mb-2\">\n            <h3 className=\"font-medium text-foreground line-clamp-2 text-sm\" data-testid=\"text-product-title\">\n              {product.title}\n            </h3>\n          </div>\n        </Link>\n        \n        <Link href={`/artisan/${product.artisanId}`}>\n          <p className=\"text-sm text-muted-foreground mb-3 hover:text-foreground transition-colors\" data-testid=\"text-artisan-name\">\n            by {artisanName}\n          </p>\n        </Link>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-lg font-semibold text-foreground\" data-testid=\"text-price\">\n            ${parseFloat(product.price).toFixed(2)}\n          </span>\n          {product.averageRating && product._count?.reviews && (\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <Star className=\"h-4 w-4 text-yellow-400 mr-1 fill-current\" />\n              <span data-testid=\"text-rating\">\n                {product.averageRating.toFixed(1)} ({product._count.reviews})\n              </span>\n            </div>\n          )}\n        </div>\n        \n        {product.aiEnhanced && (\n          <div className=\"mt-3 flex items-center text-xs text-muted-foreground\">\n            <div className=\"ai-badge text-white px-2 py-0.5 rounded mr-2\" data-testid=\"badge-ai\">AI</div>\n            Enhanced listing\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5151},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/artisan-profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport ProductCard from \"@/components/product-card\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useRoute, Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Star, \n  Package, \n  Calendar, \n  MessageSquare, \n  Heart, \n  MapPin,\n  Mail,\n  Wand2,\n  User\n} from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from \"@/components/ui/dialog\";\nimport { \n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertInquirySchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst inquiryFormSchema = insertInquirySchema.omit({\n  buyerId: true,\n  artisanId: true,\n});\n\ntype InquiryFormData = z.infer<typeof inquiryFormSchema>;\n\nexport default function ArtisanProfile() {\n  const [, params] = useRoute(\"/artisan/:id\");\n  const artisanId = params?.id;\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [contactDialogOpen, setContactDialogOpen] = useState(false);\n  const [followDialogOpen, setFollowDialogOpen] = useState(false);\n\n  const { data: artisan, isLoading: artisanLoading } = useQuery({\n    queryKey: [\"/api/auth/user\", artisanId],\n    enabled: !!artisanId,\n    queryFn: async () => {\n      const response = await fetch(`/api/auth/user?id=${artisanId}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    }\n  });\n\n  const { data: artisanProducts, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", { artisanId }],\n    enabled: !!artisanId,\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/artisan\", artisanId, \"stats\"],\n    enabled: !!artisanId,\n  });\n\n  const { data: favorites } = useQuery({\n    queryKey: [\"/api/favorites\"],\n    enabled: !!user?.id,\n  });\n\n  const favoriteProductIds = new Set(favorites?.map(p => p.id) || []);\n\n  const inquiryForm = useForm<InquiryFormData>({\n    resolver: zodResolver(inquiryFormSchema),\n    defaultValues: {\n      productId: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const inquiryMutation = useMutation({\n    mutationFn: async (data: InquiryFormData & { artisanId: string }) => {\n      return apiRequest('POST', '/api/inquiries', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent\",\n        description: \"Your inquiry has been sent to the artisan.\",\n        variant: \"default\",\n      });\n      setContactDialogOpen(false);\n      inquiryForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send inquiry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitInquiry = (data: InquiryFormData) => {\n    if (!artisanId) return;\n    inquiryMutation.mutate({ ...data, artisanId });\n  };\n\n  const handleContactClick = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to contact artisans\",\n        variant: \"default\"\n      });\n      return;\n    }\n    setContactDialogOpen(true);\n  };\n\n  const handleFollowClick = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to follow artisans\",\n        variant: \"default\"\n      });\n      return;\n    }\n    setFollowDialogOpen(true);\n  };\n\n  if (artisanLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card className=\"overflow-hidden\">\n            <div className=\"relative h-48 bg-gradient-to-r from-accent to-primary\">\n              <Skeleton className=\"w-full h-full\" />\n            </div>\n            <div className=\"relative px-8 pb-8\">\n              <div className=\"flex items-start -mt-16 mb-6\">\n                <Skeleton className=\"w-32 h-32 rounded-full\" />\n                <div className=\"ml-6 mt-16 flex-1\">\n                  <Skeleton className=\"h-8 w-64 mb-2\" />\n                  <Skeleton className=\"h-4 w-48 mb-2\" />\n                  <Skeleton className=\"h-4 w-80\" />\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!artisan) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card className=\"p-12 text-center\">\n            <User className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Artisan Not Found</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              The artisan profile you're looking for doesn't exist.\n            </p>\n            <Link href=\"/marketplace\">\n              <Button>Browse Marketplace</Button>\n            </Link>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const artisanName = artisan.firstName && artisan.lastName\n    ? `${artisan.firstName} ${artisan.lastName}`\n    : 'Anonymous Artisan';\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"overflow-hidden shadow-lg\">\n          {/* Cover Image */}\n          <div className=\"relative h-48 bg-gradient-to-r from-accent to-primary craft-pattern\">\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\"></div>\n          </div>\n          \n          <div className=\"relative px-8 pb-8\">\n            {/* Profile Section */}\n            <div className=\"flex flex-col md:flex-row items-start -mt-16 mb-8\">\n              <div className=\"relative\">\n                {artisan.profileImageUrl ? (\n                  <img \n                    src={artisan.profileImageUrl}\n                    alt={artisanName}\n                    className=\"w-32 h-32 rounded-full border-4 border-card object-cover\"\n                    data-testid=\"img-artisan-avatar\"\n                  />\n                ) : (\n                  <div className=\"w-32 h-32 rounded-full border-4 border-card bg-muted flex items-center justify-center\">\n                    <User className=\"h-16 w-16 text-muted-foreground\" />\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"md:ml-6 mt-6 md:mt-16 flex-1\">\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4\">\n                  <div>\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h1 className=\"font-serif text-2xl font-bold text-foreground\" data-testid=\"text-artisan-name\">\n                        {artisanName}\n                      </h1>\n                      {artisan.isVerified && (\n                        <Badge className=\"bg-secondary text-secondary-foreground\">\n                          Verified Artisan\n                        </Badge>\n                      )}\n                    </div>\n                    {artisan.location && (\n                      <p className=\"text-muted-foreground mb-2 flex items-center\" data-testid=\"text-artisan-location\">\n                        <MapPin className=\"h-4 w-4 mr-1\" />\n                        {artisan.location}\n                      </p>\n                    )}\n                    <div className=\"flex items-center text-sm text-muted-foreground space-x-4\">\n                      {stats && (\n                        <>\n                          <span className=\"flex items-center\" data-testid=\"text-rating\">\n                            <Star className=\"h-4 w-4 text-yellow-400 mr-1 fill-current\" />\n                            {stats.averageRating ? stats.averageRating.toFixed(1) : '0.0'} ({stats.totalReviews} reviews)\n                          </span>\n                          <span className=\"flex items-center\" data-testid=\"text-products-count\">\n                            <Package className=\"h-4 w-4 text-accent-foreground mr-1\" />\n                            {stats.totalProducts} products\n                          </span>\n                        </>\n                      )}\n                      <span className=\"flex items-center\">\n                        <Calendar className=\"h-4 w-4 text-accent-foreground mr-1\" />\n                        Member since {new Date(artisan.createdAt!).getFullYear()}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col sm:flex-row gap-3 mt-4 md:mt-0\">\n                    <Button onClick={handleContactClick} data-testid=\"button-contact\">\n                      <Mail className=\"h-4 w-4 mr-2\" />\n                      Send Message\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleFollowClick} data-testid=\"button-follow\">\n                      <Heart className=\"h-4 w-4 mr-2\" />\n                      Follow Artisan\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Bio and Details */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                <h2 className=\"font-serif text-xl font-semibold text-foreground mb-4\">About {artisan.firstName || 'This Artisan'}</h2>\n                \n                {artisan.bio ? (\n                  <div className=\"prose max-w-none\">\n                    <p className=\"text-foreground leading-relaxed whitespace-pre-wrap\" data-testid=\"text-artisan-bio\">\n                      {artisan.bio}\n                    </p>\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground\">\n                    This artisan hasn't added a bio yet.\n                  </p>\n                )}\n              </div>\n              \n              {/* Sidebar */}\n              <div className=\"space-y-6\">\n                {/* Quick Stats */}\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"font-medium text-foreground mb-4\">Quick Stats</h3>\n                    <div className=\"space-y-3\">\n                      {stats && (\n                        <>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Products</span>\n                            <span className=\"text-foreground font-medium\" data-testid=\"stat-products\">\n                              {stats.totalProducts}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Reviews</span>\n                            <span className=\"text-foreground font-medium\" data-testid=\"stat-reviews\">\n                              {stats.totalReviews}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Average Rating</span>\n                            <span className=\"text-foreground font-medium flex items-center\" data-testid=\"stat-average-rating\">\n                              <Star className=\"h-3 w-3 text-yellow-400 mr-1 fill-current\" />\n                              {stats.averageRating ? stats.averageRating.toFixed(1) : '0.0'}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Inquiries</span>\n                            <span className=\"text-foreground font-medium\" data-testid=\"stat-inquiries\">\n                              {stats.totalInquiries}\n                            </span>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                {/* Contact Info */}\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"font-medium text-foreground mb-4\">Connect</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"text-sm\">\n                        <span className=\"text-muted-foreground block\">Response Time</span>\n                        <span className=\"text-foreground\">Usually within 24 hours</span>\n                      </div>\n                      {artisan.location && (\n                        <div className=\"text-sm\">\n                          <span className=\"text-muted-foreground block\">Ships From</span>\n                          <span className=\"text-foreground\">{artisan.location}</span>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </Card>\n        \n        {/* Products Section */}\n        <section className=\"mt-12\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"font-serif text-2xl font-bold text-foreground\">\n              {artisan.firstName}'s Creations\n            </h2>\n            <p className=\"text-muted-foreground\">\n              {artisanProducts?.length || 0} products\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {productsLoading ? (\n              Array.from({ length: 8 }, (_, i) => (\n                <div key={i} className=\"bg-card rounded-xl overflow-hidden shadow-sm\">\n                  <Skeleton className=\"w-full h-48\" />\n                  <div className=\"p-4 space-y-3\">\n                    <Skeleton className=\"h-5 w-3/4\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                    <div className=\"flex justify-between\">\n                      <Skeleton className=\"h-6 w-16\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : artisanProducts?.length ? (\n              artisanProducts.map((product) => (\n                <ProductCard\n                  key={product.id}\n                  product={product}\n                  isFavorited={favoriteProductIds.has(product.id)}\n                />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <Package className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Products Yet</h3>\n                <p className=\"text-muted-foreground\">\n                  This artisan hasn't listed any products yet. Check back soon!\n                </p>\n              </div>\n            )}\n          </div>\n        </section>\n      </div>\n      \n      {/* Contact Dialog */}\n      <Dialog open={contactDialogOpen} onOpenChange={setContactDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Send Message to {artisan.firstName}</DialogTitle>\n            <DialogDescription>\n              Send a direct inquiry to this artisan about their work.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...inquiryForm}>\n            <form onSubmit={inquiryForm.handleSubmit(onSubmitInquiry)} className=\"space-y-4\">\n              <FormField\n                control={inquiryForm.control}\n                name=\"subject\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Subject</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"What would you like to ask about?\"\n                        data-testid=\"input-inquiry-subject\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={inquiryForm.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Message</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        rows={4}\n                        placeholder=\"I'm interested in your work...\"\n                        data-testid=\"textarea-inquiry-message\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setContactDialogOpen(false)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-inquiry\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={inquiryMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-send-inquiry\"\n                >\n                  {inquiryMutation.isPending ? (\n                    <>\n                      <MessageSquare className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <MessageSquare className=\"h-4 w-4 mr-2\" />\n                      Send Message\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":19301},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport ProductCard from \"@/components/product-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport { Plus, TrendingUp, Heart, MessageSquare } from \"lucide-react\";\n\nexport default function Home() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: userProducts, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", { artisanId: user?.id }],\n    enabled: !!user?.id,\n  });\n\n  const { data: favorites, isLoading: favoritesLoading } = useQuery({\n    queryKey: [\"/api/favorites\"],\n    enabled: !!user?.id,\n  });\n\n  const { data: inquiries, isLoading: inquiriesLoading } = useQuery({\n    queryKey: [\"/api/inquiries\"],\n    enabled: !!user?.id,\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/artisan\", user?.id, \"stats\"],\n    enabled: !!user?.id,\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Skeleton className=\"h-8 w-48 mb-4\" />\n          <Skeleton className=\"h-4 w-64 mb-8\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Welcome Section */}\n      <section className=\"py-12 bg-gradient-to-br from-accent/10 to-primary/10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"font-serif text-4xl font-bold text-foreground mb-4\">\n              Welcome back, {user?.firstName || 'Artisan'}!\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Ready to showcase your latest creations?\n            </p>\n          </div>\n          \n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <div className=\"bg-card rounded-xl p-6 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-2\" data-testid=\"stat-products\">\n                {stats?.totalProducts || 0}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Products Listed</p>\n            </div>\n            <div className=\"bg-card rounded-xl p-6 text-center\">\n              <div className=\"text-2xl font-bold text-secondary mb-2\" data-testid=\"stat-inquiries\">\n                {stats?.totalInquiries || 0}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Inquiries Received</p>\n            </div>\n            <div className=\"bg-card rounded-xl p-6 text-center\">\n              <div className=\"text-2xl font-bold text-accent-foreground mb-2\" data-testid=\"stat-rating\">\n                {stats?.averageRating ? stats.averageRating.toFixed(1) : '0.0'}â˜…\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Average Rating</p>\n            </div>\n            <div className=\"bg-card rounded-xl p-6 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-2\" data-testid=\"stat-reviews\">\n                {stats?.totalReviews || 0}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Total Reviews</p>\n            </div>\n          </div>\n          \n          {/* Quick Actions */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/upload\">\n              <button className=\"btn-primary flex items-center px-6 py-3\" data-testid=\"button-add-product\">\n                <Plus className=\"mr-2 h-5 w-5\" />\n                Add New Product\n              </button>\n            </Link>\n            <Link href=\"/marketplace\">\n              <button className=\"btn-outline flex items-center px-6 py-3\" data-testid=\"button-browse-marketplace\">\n                <TrendingUp className=\"mr-2 h-5 w-5\" />\n                Browse Marketplace\n              </button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Dashboard Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* My Products */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-semibold text-foreground\">My Products</h2>\n              <Link href=\"/upload\">\n                <button className=\"btn-primary text-sm\" data-testid=\"button-add-product-header\">\n                  Add Product\n                </button>\n              </Link>\n            </div>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n              {productsLoading ? (\n                Array.from({ length: 4 }, (_, i) => (\n                  <div key={i} className=\"bg-card rounded-xl overflow-hidden shadow-sm\">\n                    <Skeleton className=\"w-full h-48\" />\n                    <div className=\"p-4 space-y-3\">\n                      <Skeleton className=\"h-5 w-3/4\" />\n                      <Skeleton className=\"h-4 w-1/2\" />\n                      <Skeleton className=\"h-6 w-16\" />\n                    </div>\n                  </div>\n                ))\n              ) : userProducts?.length ? (\n                userProducts.slice(0, 4).map((product) => (\n                  <ProductCard key={product.id} product={product} />\n                ))\n              ) : (\n                <div className=\"col-span-2 text-center py-12 bg-card rounded-xl\">\n                  <p className=\"text-muted-foreground mb-4\">You haven't listed any products yet.</p>\n                  <Link href=\"/upload\">\n                    <button className=\"btn-primary\" data-testid=\"button-create-first-product\">\n                      Create Your First Product\n                    </button>\n                  </Link>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Recent Inquiries */}\n            <div className=\"bg-card rounded-xl p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Recent Inquiries</h3>\n                <MessageSquare className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              \n              {inquiriesLoading ? (\n                <div className=\"space-y-3\">\n                  {Array.from({ length: 3 }, (_, i) => (\n                    <div key={i}>\n                      <Skeleton className=\"h-4 w-full mb-2\" />\n                      <Skeleton className=\"h-3 w-1/2\" />\n                    </div>\n                  ))}\n                </div>\n              ) : inquiries?.length ? (\n                <div className=\"space-y-3\">\n                  {inquiries.slice(0, 3).map((inquiry) => (\n                    <div key={inquiry.id} className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-inquiry-subject\">\n                        {inquiry.subject}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {new Date(inquiry.createdAt!).toLocaleDateString()}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground\">No inquiries yet.</p>\n              )}\n            </div>\n\n            {/* Favorites */}\n            <div className=\"bg-card rounded-xl p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">My Favorites</h3>\n                <Heart className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              \n              {favoritesLoading ? (\n                <div className=\"space-y-3\">\n                  {Array.from({ length: 3 }, (_, i) => (\n                    <div key={i} className=\"flex items-center space-x-3\">\n                      <Skeleton className=\"h-12 w-12 rounded\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-4 w-full mb-1\" />\n                        <Skeleton className=\"h-3 w-1/2\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : favorites?.length ? (\n                <div className=\"space-y-3\">\n                  {favorites.slice(0, 3).map((product) => (\n                    <Link key={product.id} href={`/product/${product.id}`}>\n                      <div className=\"flex items-center space-x-3 hover:bg-accent/20 p-2 rounded transition-colors\">\n                        <img\n                          src={product.images?.[0] || 'https://images.unsplash.com/photo-1578662996442-48f60103fc96'}\n                          alt={product.title}\n                          className=\"h-12 w-12 rounded object-cover\"\n                        />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium text-foreground truncate\">\n                            {product.title}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            ${parseFloat(product.price).toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    </Link>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground\">No favorites yet.</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10531},"client/src/pages/landing.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport HeroSection from \"@/components/hero-section\";\nimport CategoryGrid from \"@/components/category-grid\";\nimport Footer from \"@/components/footer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport ProductCard from \"@/components/product-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Landing() {\n  const { data: featuredProducts, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <HeroSection />\n      <CategoryGrid />\n      \n      {/* Featured Products Section */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-serif text-3xl font-bold text-foreground mb-4\">Featured Creations</h2>\n            <p className=\"text-muted-foreground\">Discover amazing handmade items from our talented artisans</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {productsLoading ? (\n              Array.from({ length: 8 }, (_, i) => (\n                <div key={i} className=\"bg-background rounded-xl overflow-hidden shadow-sm\">\n                  <Skeleton className=\"w-full h-48\" />\n                  <div className=\"p-4 space-y-3\">\n                    <Skeleton className=\"h-5 w-3/4\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                    <div className=\"flex justify-between\">\n                      <Skeleton className=\"h-6 w-16\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              featuredProducts?.slice(0, 8).map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))\n            )}\n          </div>\n          \n          {!productsLoading && featuredProducts && featuredProducts.length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No products available yet. Be the first to list your creation!</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2390},"client/src/pages/marketplace.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport ProductCard from \"@/components/product-card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Marketplace() {\n  const [search, setSearch] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/products\", { search: search || undefined, categoryId: categoryFilter || undefined }],\n  });\n\n  const { data: favorites } = useQuery({\n    queryKey: [\"/api/favorites\"],\n  });\n\n  const favoriteProductIds = new Set(favorites?.map(p => p.id) || []);\n\n  // Sort products based on sortBy\n  const sortedProducts = products ? [...products].sort((a, b) => {\n    switch (sortBy) {\n      case \"price-low\":\n        return parseFloat(a.price) - parseFloat(b.price);\n      case \"price-high\":\n        return parseFloat(b.price) - parseFloat(a.price);\n      case \"popular\":\n        return (b._count?.reviews || 0) - (a._count?.reviews || 0);\n      case \"newest\":\n      default:\n        return new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime();\n    }\n  }) : [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4\">\n          <div>\n            <h1 className=\"font-serif text-3xl font-bold text-foreground mb-2\">Marketplace</h1>\n            <p className=\"text-muted-foreground\">Discover unique handmade items from talented artisans</p>\n          </div>\n          \n          {/* Filters and Search */}\n          <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center space-y-4 sm:space-y-0 sm:space-x-4 w-full md:w-auto\">\n            <div className=\"relative flex-1 sm:flex-none\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search products...\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"pl-10 w-full sm:w-64\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            \n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-category\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Categories</SelectItem>\n                {categories?.map((category) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-sort\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"newest\">Newest First</SelectItem>\n                <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                <SelectItem value=\"popular\">Most Popular</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        \n        {/* Results count */}\n        <div className=\"mb-6\">\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-results-count\">\n            {isLoading ? \"Loading...\" : `${sortedProducts.length} product${sortedProducts.length !== 1 ? 's' : ''} found`}\n          </p>\n        </div>\n        \n        {/* Product Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n          {isLoading ? (\n            Array.from({ length: 12 }, (_, i) => (\n              <div key={i} className=\"bg-card rounded-xl overflow-hidden shadow-sm\">\n                <Skeleton className=\"w-full h-48\" />\n                <div className=\"p-4 space-y-3\">\n                  <Skeleton className=\"h-5 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-6 w-16\" />\n                    <Skeleton className=\"h-4 w-20\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : sortedProducts.length > 0 ? (\n            sortedProducts.map((product) => (\n              <ProductCard\n                key={product.id}\n                product={product}\n                isFavorited={favoriteProductIds.has(product.id)}\n              />\n            ))\n          ) : (\n            <div className=\"col-span-full text-center py-12\">\n              <div className=\"max-w-md mx-auto\">\n                <div className=\"text-muted-foreground text-6xl mb-4\">ðŸŽ¨</div>\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No products found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {search || categoryFilter \n                    ? \"Try adjusting your search filters to find what you're looking for.\"\n                    : \"No products available yet. Check back soon for new creations!\"\n                  }\n                </p>\n                {(search || categoryFilter) && (\n                  <button\n                    onClick={() => {\n                      setSearch(\"\");\n                      setCategoryFilter(\"\");\n                    }}\n                    className=\"btn-outline\"\n                    data-testid=\"button-clear-filters\"\n                  >\n                    Clear Filters\n                  </button>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6535},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useRoute, Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Star, \n  Heart, \n  MessageSquare,\n  X,\n  ChevronLeft,\n  ChevronRight,\n  User,\n  Package,\n  ShoppingBag\n} from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from \"@/components/ui/dialog\";\nimport { \n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertInquirySchema, insertReviewSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst inquiryFormSchema = insertInquirySchema.omit({\n  buyerId: true,\n  artisanId: true,\n});\n\nconst reviewFormSchema = insertReviewSchema.omit({\n  buyerId: true,\n  artisanId: true,\n});\n\ntype InquiryFormData = z.infer<typeof inquiryFormSchema>;\ntype ReviewFormData = z.infer<typeof reviewFormSchema>;\n\nexport default function ProductDetail() {\n  const [, params] = useRoute(\"/product/:id\");\n  const productId = params?.id;\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [contactDialogOpen, setContactDialogOpen] = useState(false);\n  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);\n  const [favorited, setFavorited] = useState(false);\n\n  const { data: product, isLoading: productLoading } = useQuery({\n    queryKey: [\"/api/products\", productId],\n    enabled: !!productId,\n  });\n\n  const { data: reviews, isLoading: reviewsLoading } = useQuery({\n    queryKey: [\"/api/reviews\", productId],\n    enabled: !!productId,\n  });\n\n  const { data: favorites } = useQuery({\n    queryKey: [\"/api/favorites\"],\n    enabled: !!user?.id,\n  });\n\n  const { data: artisan } = useQuery({\n    queryKey: [\"/api/auth/user\", product?.artisanId],\n    enabled: !!product?.artisanId,\n    queryFn: async () => {\n      const response = await fetch(`/api/auth/user?id=${product.artisanId}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    }\n  });\n\n  // Check if product is favorited\n  useEffect(() => {\n    if (favorites && productId) {\n      setFavorited(favorites.some(p => p.id === productId));\n    }\n  }, [favorites, productId]);\n\n  const inquiryForm = useForm<InquiryFormData>({\n    resolver: zodResolver(inquiryFormSchema),\n    defaultValues: {\n      productId: productId || \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const reviewForm = useForm<ReviewFormData>({\n    resolver: zodResolver(reviewFormSchema),\n    defaultValues: {\n      productId: productId || \"\",\n      rating: 5,\n      comment: \"\",\n    },\n  });\n\n  const favoriteMutation = useMutation({\n    mutationFn: async (action: 'add' | 'remove') => {\n      if (action === 'add') {\n        return apiRequest('POST', '/api/favorites', { productId });\n      } else {\n        return apiRequest('DELETE', `/api/favorites/${productId}`);\n      }\n    },\n    onSuccess: (_, action) => {\n      setFavorited(action === 'add');\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      toast({\n        title: action === 'add' ? \"Added to favorites\" : \"Removed from favorites\",\n        variant: \"default\"\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update favorites\",\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  const inquiryMutation = useMutation({\n    mutationFn: async (data: InquiryFormData & { artisanId: string }) => {\n      return apiRequest('POST', '/api/inquiries', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent\",\n        description: \"Your inquiry has been sent to the artisan.\",\n        variant: \"default\",\n      });\n      setContactDialogOpen(false);\n      inquiryForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send inquiry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: async (data: ReviewFormData & { artisanId: string }) => {\n      return apiRequest('POST', '/api/reviews', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review Submitted\",\n        description: \"Thank you for your review!\",\n        variant: \"default\",\n      });\n      setReviewDialogOpen(false);\n      reviewForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews\", productId] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit review\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFavoriteClick = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to save favorites\",\n        variant: \"default\"\n      });\n      return;\n    }\n\n    favoriteMutation.mutate(favorited ? 'remove' : 'add');\n  };\n\n  const handleContactClick = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to contact artisans\",\n        variant: \"default\"\n      });\n      return;\n    }\n    \n    inquiryForm.setValue('productId', productId || '');\n    inquiryForm.setValue('subject', `Inquiry about ${product?.title}`);\n    setContactDialogOpen(true);\n  };\n\n  const handleReviewClick = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to leave reviews\",\n        variant: \"default\"\n      });\n      return;\n    }\n    \n    reviewForm.setValue('productId', productId || '');\n    setReviewDialogOpen(true);\n  };\n\n  const onSubmitInquiry = (data: InquiryFormData) => {\n    if (!product?.artisanId) return;\n    inquiryMutation.mutate({ ...data, artisanId: product.artisanId });\n  };\n\n  const onSubmitReview = (data: ReviewFormData) => {\n    if (!product?.artisanId) return;\n    reviewMutation.mutate({ ...data, artisanId: product.artisanId });\n  };\n\n  const nextImage = () => {\n    if (!product?.images) return;\n    setCurrentImageIndex((prev) => \n      prev === product.images.length - 1 ? 0 : prev + 1\n    );\n  };\n\n  const prevImage = () => {\n    if (!product?.images) return;\n    setCurrentImageIndex((prev) => \n      prev === 0 ? product.images.length - 1 : prev - 1\n    );\n  };\n\n  if (productLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div>\n              <Skeleton className=\"w-full h-96 rounded-xl mb-4\" />\n              <div className=\"flex space-x-2\">\n                {[1, 2, 3].map(i => (\n                  <Skeleton key={i} className=\"w-20 h-20 rounded\" />\n                ))}\n              </div>\n            </div>\n            <div className=\"space-y-6\">\n              <Skeleton className=\"h-8 w-3/4\" />\n              <Skeleton className=\"h-6 w-1/2\" />\n              <Skeleton className=\"h-20 w-full\" />\n              <Skeleton className=\"h-10 w-full\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card className=\"p-12 text-center\">\n            <Package className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Product Not Found</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              The product you're looking for doesn't exist or has been removed.\n            </p>\n            <Link href=\"/marketplace\">\n              <Button>Browse Marketplace</Button>\n            </Link>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const artisanName = artisan?.firstName && artisan?.lastName\n    ? `${artisan.firstName} ${artisan.lastName}`\n    : 'Unknown Artisan';\n\n  const averageRating = reviews?.length \n    ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length \n    : 0;\n\n  const currentImage = product.images?.[currentImageIndex] || 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600';\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Product Images */}\n          <div className=\"space-y-4\">\n            <div className=\"relative\">\n              <img \n                src={currentImage}\n                alt={product.title} \n                className=\"w-full h-96 object-cover rounded-xl\"\n                data-testid=\"img-product-main\"\n              />\n              \n              {product.images && product.images.length > 1 && (\n                <>\n                  <button\n                    onClick={prevImage}\n                    className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white rounded-full p-2 shadow-md\"\n                    data-testid=\"button-prev-image\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </button>\n                  <button\n                    onClick={nextImage}\n                    className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white rounded-full p-2 shadow-md\"\n                    data-testid=\"button-next-image\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </button>\n                </>\n              )}\n            </div>\n            \n            {product.images && product.images.length > 1 && (\n              <div className=\"flex space-x-2 overflow-x-auto\">\n                {product.images.map((image, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setCurrentImageIndex(index)}\n                    className={`flex-shrink-0 w-20 h-20 rounded border-2 overflow-hidden ${\n                      index === currentImageIndex ? 'border-primary' : 'border-border opacity-60'\n                    }`}\n                    data-testid={`button-image-thumbnail-${index}`}\n                  >\n                    <img\n                      src={image}\n                      alt={`${product.title} view ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"font-serif text-3xl font-bold text-foreground mb-4\" data-testid=\"text-product-title\">\n                {product.title}\n              </h1>\n              \n              <div className=\"flex items-center space-x-4 mb-6\">\n                <span className=\"text-3xl font-bold text-foreground\" data-testid=\"text-product-price\">\n                  ${parseFloat(product.price).toFixed(2)}\n                </span>\n                {reviews?.length && (\n                  <div className=\"flex items-center text-sm text-muted-foreground\">\n                    <Star className=\"h-4 w-4 text-yellow-400 mr-1 fill-current\" />\n                    <span data-testid=\"text-product-rating\">\n                      {averageRating.toFixed(1)} ({reviews.length} reviews)\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              {product.aiEnhanced && (\n                <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg p-4 mb-6\">\n                  <div className=\"flex items-center mb-2\">\n                    <div className=\"ai-badge text-white p-1.5 rounded mr-2\" data-testid=\"badge-ai-enhanced\">AI</div>\n                    <span className=\"text-sm font-medium\">AI-Enhanced Description</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">This product description has been optimized using AI for better storytelling and search visibility.</p>\n                </div>\n              )}\n              \n              <p className=\"text-foreground leading-relaxed mb-6 whitespace-pre-wrap\" data-testid=\"text-product-description\">\n                {product.description}\n              </p>\n            </div>\n            \n            {/* Product Details */}\n            <Card>\n              <CardContent className=\"p-6 space-y-4\">\n                <h3 className=\"font-semibold text-foreground mb-4\">Product Details</h3>\n                {product.materials && (\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Materials:</span>\n                    <span className=\"text-foreground\" data-testid=\"text-product-materials\">{product.materials}</span>\n                  </div>\n                )}\n                {product.dimensions && (\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Dimensions:</span>\n                    <span className=\"text-foreground\" data-testid=\"text-product-dimensions\">{product.dimensions}</span>\n                  </div>\n                )}\n                {product.careInstructions && (\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Care:</span>\n                    <span className=\"text-foreground\" data-testid=\"text-product-care\">{product.careInstructions}</span>\n                  </div>\n                )}\n                {artisan?.location && (\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Ships from:</span>\n                    <span className=\"text-foreground\">{artisan.location}</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            \n            {/* Artisan Info */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <Link href={`/artisan/${product.artisanId}`}>\n                    {artisan?.profileImageUrl ? (\n                      <img\n                        src={artisan.profileImageUrl}\n                        alt={artisanName}\n                        className=\"w-12 h-12 rounded-full object-cover\"\n                        data-testid=\"img-artisan-avatar\"\n                      />\n                    ) : (\n                      <div className=\"w-12 h-12 rounded-full bg-muted flex items-center justify-center\">\n                        <User className=\"h-6 w-6 text-muted-foreground\" />\n                      </div>\n                    )}\n                  </Link>\n                  <div className=\"flex-1\">\n                    <Link href={`/artisan/${product.artisanId}`}>\n                      <p className=\"font-medium text-foreground hover:text-primary transition-colors\" data-testid=\"text-artisan-name\">\n                        {artisanName}\n                      </p>\n                    </Link>\n                    {artisan?.isVerified && (\n                      <p className=\"text-sm text-muted-foreground\">Verified Artisan</p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Action Buttons */}\n            <div className=\"space-y-3\">\n              <Button \n                onClick={handleContactClick} \n                className=\"w-full\"\n                data-testid=\"button-contact-artisan\"\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Contact Artisan\n              </Button>\n              \n              <div className=\"flex gap-3\">\n                <Button \n                  variant=\"outline\" \n                  onClick={handleFavoriteClick}\n                  disabled={favoriteMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-add-favorite\"\n                >\n                  <Heart className={`h-4 w-4 mr-2 ${favorited ? 'fill-current text-red-500' : ''}`} />\n                  {favorited ? 'Remove from Favorites' : 'Add to Favorites'}\n                </Button>\n                \n                <Button \n                  variant=\"outline\"\n                  onClick={handleReviewClick}\n                  className=\"flex-1\"\n                  data-testid=\"button-write-review\"\n                >\n                  <Star className=\"h-4 w-4 mr-2\" />\n                  Write Review\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Reviews Section */}\n        <section className=\"mt-16\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"font-serif text-2xl font-bold text-foreground\">\n              Customer Reviews\n            </h2>\n            <div className=\"flex items-center space-x-2\">\n              <Star className=\"h-5 w-5 text-yellow-400 fill-current\" />\n              <span className=\"font-semibold\" data-testid=\"text-average-rating\">\n                {averageRating.toFixed(1)}\n              </span>\n              <span className=\"text-muted-foreground\">\n                ({reviews?.length || 0} reviews)\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"space-y-6\">\n            {reviewsLoading ? (\n              Array.from({ length: 3 }, (_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <Skeleton className=\"w-10 h-10 rounded-full\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-4 w-32 mb-2\" />\n                        <Skeleton className=\"h-3 w-24\" />\n                      </div>\n                    </div>\n                    <Skeleton className=\"h-16 w-full\" />\n                  </CardContent>\n                </Card>\n              ))\n            ) : reviews?.length ? (\n              reviews.map((review) => (\n                <Card key={review.id}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-10 h-10 rounded-full bg-muted flex items-center justify-center\">\n                        <User className=\"h-5 w-5 text-muted-foreground\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <span className=\"font-medium text-foreground\">Customer</span>\n                          <div className=\"flex items-center\">\n                            {Array.from({ length: 5 }, (_, i) => (\n                              <Star\n                                key={i}\n                                className={`h-4 w-4 ${\n                                  i < review.rating \n                                    ? 'text-yellow-400 fill-current' \n                                    : 'text-gray-300'\n                                }`}\n                              />\n                            ))}\n                          </div>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {new Date(review.createdAt!).toLocaleDateString()}\n                          </span>\n                        </div>\n                        {review.comment && (\n                          <p className=\"text-foreground\" data-testid={`text-review-comment-${review.id}`}>\n                            {review.comment}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <Star className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">No Reviews Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Be the first to review this product!\n                  </p>\n                  <Button onClick={handleReviewClick} data-testid=\"button-first-review\">\n                    Write First Review\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </section>\n      </div>\n      \n      {/* Contact Dialog */}\n      <Dialog open={contactDialogOpen} onOpenChange={setContactDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Contact Artisan</DialogTitle>\n            <DialogDescription>\n              Send a message about this product to {artisanName}.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...inquiryForm}>\n            <form onSubmit={inquiryForm.handleSubmit(onSubmitInquiry)} className=\"space-y-4\">\n              <FormField\n                control={inquiryForm.control}\n                name=\"subject\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Subject</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"What would you like to ask about?\"\n                        data-testid=\"input-inquiry-subject\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={inquiryForm.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Message</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        rows={4}\n                        placeholder=\"I'm interested in this product...\"\n                        data-testid=\"textarea-inquiry-message\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setContactDialogOpen(false)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-inquiry\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={inquiryMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-send-inquiry\"\n                >\n                  {inquiryMutation.isPending ? (\n                    <>\n                      <MessageSquare className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <MessageSquare className=\"h-4 w-4 mr-2\" />\n                      Send Message\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Review Dialog */}\n      <Dialog open={reviewDialogOpen} onOpenChange={setReviewDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Write a Review</DialogTitle>\n            <DialogDescription>\n              Share your experience with this product.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...reviewForm}>\n            <form onSubmit={reviewForm.handleSubmit(onSubmitReview)} className=\"space-y-4\">\n              <FormField\n                control={reviewForm.control}\n                name=\"rating\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Rating</FormLabel>\n                    <FormControl>\n                      <div className=\"flex items-center space-x-2\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <button\n                            key={i}\n                            type=\"button\"\n                            onClick={() => field.onChange(i + 1)}\n                            className=\"p-1\"\n                            data-testid={`button-rating-${i + 1}`}\n                          >\n                            <Star\n                              className={`h-6 w-6 ${\n                                i < field.value \n                                  ? 'text-yellow-400 fill-current' \n                                  : 'text-gray-300'\n                              }`}\n                            />\n                          </button>\n                        ))}\n                        <span className=\"text-sm text-muted-foreground ml-2\">\n                          {field.value} star{field.value !== 1 ? 's' : ''}\n                        </span>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={reviewForm.control}\n                name=\"comment\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Comment (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        rows={4}\n                        placeholder=\"Share your thoughts about this product...\"\n                        data-testid=\"textarea-review-comment\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setReviewDialogOpen(false)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-review\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={reviewMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-submit-review\"\n                >\n                  {reviewMutation.isPending ? (\n                    <>\n                      <Star className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Submitting...\n                    </>\n                  ) : (\n                    <>\n                      <Star className=\"h-4 w-4 mr-2\" />\n                      Submit Review\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":29395},"client/src/pages/upload.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { CloudUpload, Wand2, DollarSign, Tag, Megaphone, Heart, Loader2 } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\n\nconst productFormSchema = insertProductSchema.extend({\n  images: z.array(z.instanceof(File)).min(1, \"At least one image is required\"),\n}).omit({\n  artisanId: true,\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\nexport default function Upload() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [imageFiles, setImageFiles] = useState<File[]>([]);\n  const [imagePreviews, setImagePreviews] = useState<string[]>([]);\n  const [aiSuggestions, setAiSuggestions] = useState<any>(null);\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      price: \"0\",\n      categoryId: \"\",\n      materials: \"\",\n      dimensions: \"\",\n      careInstructions: \"\",\n      images: [],\n    },\n  });\n\n  // AI pricing mutation\n  const pricingMutation = useMutation({\n    mutationFn: async (data: { title: string; description: string; category: string; materials: string }) => {\n      const response = await apiRequest('POST', '/api/ai/pricing', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      form.setValue('price', data.suggestedPrice.toString());\n      setAiSuggestions(prev => ({ ...prev, pricing: data }));\n      toast({\n        title: \"AI Pricing Suggestion\",\n        description: `Suggested price: $${data.suggestedPrice}`,\n        variant: \"default\"\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to get AI pricing suggestion\",\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  // AI marketing mutation\n  const marketingMutation = useMutation({\n    mutationFn: async (data: { title: string; description: string; category: string }) => {\n      const response = await apiRequest('POST', '/api/ai/marketing', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAiSuggestions(prev => ({ ...prev, marketing: data }));\n      toast({\n        title: \"AI Marketing Content Generated\",\n        description: \"SEO title, social caption, and story version ready!\",\n        variant: \"default\"\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate marketing content\",\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  // Product creation mutation\n  const createProductMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await fetch('/api/products', {\n        method: 'POST',\n        body: data,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Product Created\",\n        description: \"Your product has been listed successfully!\",\n        variant: \"default\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setLocation(`/product/${data.id}`);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product\",\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length === 0) return;\n\n    // Validate file types and sizes\n    const validFiles = files.filter(file => {\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Invalid file type\",\n          description: `${file.name} is not an image file`,\n          variant: \"destructive\"\n        });\n        return false;\n      }\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than 10MB`,\n          variant: \"destructive\"\n        });\n        return false;\n      }\n      return true;\n    });\n\n    setImageFiles(prev => [...prev, ...validFiles]);\n    form.setValue('images', [...imageFiles, ...validFiles]);\n\n    // Create previews\n    validFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreviews(prev => [...prev, e.target?.result as string]);\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const removeImage = (index: number) => {\n    const newFiles = imageFiles.filter((_, i) => i !== index);\n    const newPreviews = imagePreviews.filter((_, i) => i !== index);\n    \n    setImageFiles(newFiles);\n    setImagePreviews(newPreviews);\n    form.setValue('images', newFiles);\n  };\n\n  const handleAIPricing = () => {\n    const formData = form.getValues();\n    const category = categories?.find(c => c.id === formData.categoryId);\n    \n    if (!formData.title || !formData.description || !category) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in title, description, and category first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    pricingMutation.mutate({\n      title: formData.title,\n      description: formData.description,\n      category: category.name,\n      materials: formData.materials || \"\"\n    });\n  };\n\n  const handleAIMarketing = () => {\n    const formData = form.getValues();\n    const category = categories?.find(c => c.id === formData.categoryId);\n    \n    if (!formData.title || !formData.description || !category) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in title, description, and category first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    marketingMutation.mutate({\n      title: formData.title,\n      description: formData.description,\n      category: category.name\n    });\n  };\n\n  const applyMarketingContent = (type: 'seoTitle' | 'socialCaption' | 'storyVersion' | 'marketingDescription') => {\n    if (!aiSuggestions?.marketing) return;\n\n    switch (type) {\n      case 'seoTitle':\n        form.setValue('title', aiSuggestions.marketing.seoTitle);\n        break;\n      case 'marketingDescription':\n        form.setValue('description', aiSuggestions.marketing.marketingDescription);\n        break;\n    }\n  };\n\n  const onSubmit = (data: ProductFormData) => {\n    const formData = new FormData();\n    \n    // Add all form fields\n    formData.append('title', data.title);\n    formData.append('description', data.description);\n    formData.append('price', data.price);\n    formData.append('categoryId', data.categoryId);\n    formData.append('materials', data.materials || '');\n    formData.append('dimensions', data.dimensions || '');\n    formData.append('careInstructions', data.careInstructions || '');\n    formData.append('aiEnhanced', aiSuggestions ? 'true' : 'false');\n    formData.append('aiPricingSuggested', !!aiSuggestions?.pricing ? 'true' : 'false');\n    \n    if (aiSuggestions?.marketing?.seoTitle) {\n      formData.append('seoTitle', aiSuggestions.marketing.seoTitle);\n    }\n    if (aiSuggestions?.marketing?.marketingDescription) {\n      formData.append('marketingCaption', aiSuggestions.marketing.marketingDescription);\n    }\n\n    // Add image files\n    imageFiles.forEach((file, index) => {\n      formData.append('images', file);\n    });\n\n    createProductMutation.mutate(formData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"font-serif text-3xl font-bold text-foreground mb-4\">List Your Masterpiece</h1>\n          <p className=\"text-muted-foreground\">Our AI assistant will help you optimize your listing for maximum visibility</p>\n        </div>\n        \n        <Card>\n          <CardContent className=\"p-8\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Image Upload */}\n                <FormField\n                  control={form.control}\n                  name=\"images\"\n                  render={() => (\n                    <FormItem>\n                      <FormLabel>Product Images</FormLabel>\n                      <FormControl>\n                        <div className=\"space-y-4\">\n                          <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors cursor-pointer\">\n                            <input\n                              type=\"file\"\n                              multiple\n                              accept=\"image/*\"\n                              onChange={handleImageChange}\n                              className=\"hidden\"\n                              id=\"image-upload\"\n                              data-testid=\"input-images\"\n                            />\n                            <label htmlFor=\"image-upload\" className=\"cursor-pointer\">\n                              <CloudUpload className=\"text-muted-foreground text-4xl mb-4 mx-auto h-12 w-12\" />\n                              <p className=\"text-muted-foreground mb-2\">Drop your images here or click to browse</p>\n                              <p className=\"text-xs text-muted-foreground\">Support: JPG, PNG, WebP (Max 10MB each)</p>\n                            </label>\n                          </div>\n                          \n                          {imagePreviews.length > 0 && (\n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                              {imagePreviews.map((preview, index) => (\n                                <div key={index} className=\"relative\">\n                                  <img\n                                    src={preview}\n                                    alt={`Preview ${index + 1}`}\n                                    className=\"w-full h-32 object-cover rounded-lg\"\n                                  />\n                                  <button\n                                    type=\"button\"\n                                    onClick={() => removeImage(index)}\n                                    className=\"absolute -top-2 -right-2 bg-destructive text-destructive-foreground rounded-full w-6 h-6 text-xs\"\n                                    data-testid={`button-remove-image-${index}`}\n                                  >\n                                    Ã—\n                                  </button>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                {/* Product Details */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Title</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., Handwoven Ceramic Bowl\" data-testid=\"input-title\" />\n                        </FormControl>\n                        <div className=\"flex items-center text-xs text-muted-foreground mt-2\">\n                          <div className=\"ai-badge text-white px-2 py-1 rounded mr-2\">AI</div>\n                          SEO-optimized title suggestions available\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select a category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories?.map((category) => (\n                              <SelectItem key={category.id} value={category.id}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={4} placeholder=\"Tell the story of your creation...\" data-testid=\"textarea-description\" />\n                      </FormControl>\n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div className=\"flex items-center text-xs text-muted-foreground\">\n                          <div className=\"ai-badge text-white px-2 py-1 rounded mr-2\">AI</div>\n                          Generate compelling product story\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"link\"\n                          size=\"sm\"\n                          onClick={handleAIMarketing}\n                          disabled={marketingMutation.isPending}\n                          className=\"text-primary\"\n                          data-testid=\"button-enhance-ai\"\n                        >\n                          {marketingMutation.isPending ? (\n                            <Loader2 className=\"mr-1 h-4 w-4 animate-spin\" />\n                          ) : (\n                            <Wand2 className=\"mr-1 h-4 w-4\" />\n                          )}\n                          Enhance with AI\n                        </Button>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                {/* Additional Details */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"materials\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Materials (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., Stoneware clay, lead-free glaze\" data-testid=\"input-materials\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"dimensions\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Dimensions (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., 6&quot; diameter x 3&quot; height\" data-testid=\"input-dimensions\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"careInstructions\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Care Instructions (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} placeholder=\"e.g., Dishwasher and microwave safe\" data-testid=\"textarea-care\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                {/* Pricing with AI */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price (USD)</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <span className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground\">$</span>\n                            <Input {...field} type=\"number\" step=\"0.01\" className=\"pl-8\" placeholder=\"0.00\" data-testid=\"input-price\" />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex items-end\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"w-full bg-accent text-accent-foreground hover:bg-accent/90\"\n                      onClick={handleAIPricing}\n                      disabled={pricingMutation.isPending}\n                      data-testid=\"button-ai-pricing\"\n                    >\n                      {pricingMutation.isPending ? (\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      ) : (\n                        <DollarSign className=\"mr-2 h-4 w-4\" />\n                      )}\n                      Get AI Price Suggestion\n                    </Button>\n                  </div>\n                </div>\n                \n                {/* AI Marketing Assistant */}\n                <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-lg\">\n                      <div className=\"ai-badge text-white p-2 rounded-lg mr-3\">\n                        <Wand2 className=\"h-4 w-4\" />\n                      </div>\n                      AI Marketing Assistant\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">Generate engaging content for your product listing and social media</p>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 mb-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                        onClick={() => applyMarketingContent('seoTitle')}\n                        disabled={!aiSuggestions?.marketing}\n                        data-testid=\"button-apply-seo-title\"\n                      >\n                        <Tag className=\"h-6 w-6 text-primary\" />\n                        <div className=\"text-center\">\n                          <div className=\"font-medium text-sm\">SEO Title</div>\n                          <div className=\"text-xs text-muted-foreground\">Optimize for search</div>\n                        </div>\n                      </Button>\n                      \n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                        disabled={!aiSuggestions?.marketing}\n                        data-testid=\"button-social-caption\"\n                      >\n                        <Megaphone className=\"h-6 w-6 text-primary\" />\n                        <div className=\"text-center\">\n                          <div className=\"font-medium text-sm\">Social Caption</div>\n                          <div className=\"text-xs text-muted-foreground\">Instagram ready</div>\n                        </div>\n                      </Button>\n                      \n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                        onClick={() => applyMarketingContent('marketingDescription')}\n                        disabled={!aiSuggestions?.marketing}\n                        data-testid=\"button-apply-story\"\n                      >\n                        <Heart className=\"h-6 w-6 text-primary\" />\n                        <div className=\"text-center\">\n                          <div className=\"font-medium text-sm\">Story Version</div>\n                          <div className=\"text-xs text-muted-foreground\">Emotional appeal</div>\n                        </div>\n                      </Button>\n                    </div>\n                    \n                    {/* Display AI suggestions */}\n                    {aiSuggestions?.marketing && (\n                      <div className=\"bg-card rounded-lg p-4 space-y-3\">\n                        <div>\n                          <h4 className=\"text-sm font-medium mb-1\">SEO Title:</h4>\n                          <p className=\"text-sm text-muted-foreground\">{aiSuggestions.marketing.seoTitle}</p>\n                        </div>\n                        <div>\n                          <h4 className=\"text-sm font-medium mb-1\">Social Caption:</h4>\n                          <p className=\"text-sm text-muted-foreground\">{aiSuggestions.marketing.socialCaption}</p>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {aiSuggestions?.pricing && (\n                      <div className=\"bg-card rounded-lg p-4 mt-4\">\n                        <h4 className=\"text-sm font-medium mb-2\">AI Pricing Analysis:</h4>\n                        <p className=\"text-sm text-muted-foreground mb-2\">{aiSuggestions.pricing.reasoning}</p>\n                        <p className=\"text-sm\">\n                          Suggested range: ${aiSuggestions.pricing.priceRange.min} - ${aiSuggestions.pricing.priceRange.max}\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n                \n                {/* Submit Buttons */}\n                <div className=\"flex gap-4\">\n                  <Button type=\"button\" variant=\"outline\" className=\"flex-1\" data-testid=\"button-save-draft\">\n                    Save as Draft\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1\" \n                    disabled={createProductMutation.isPending}\n                    data-testid=\"button-list-product\"\n                  >\n                    {createProductMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Creating...\n                      </>\n                    ) : (\n                      <>\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        List Product\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":26950},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}